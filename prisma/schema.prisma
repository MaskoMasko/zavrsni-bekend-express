generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Student {
  id            Int     @id @default(autoincrement())
  jmbag         String  @unique
  firstName     String
  lastName      String
  email         String  @unique
  passwordHash  String
  enrolledYear  Int
  repeatingYear Boolean @default(false)
  module        String?

  // PraÄ‡enje koraka upisa
  enrollmentStep               Int     @default(0)
  enrollmentYearSelected       Boolean @default(false)
  enrollmentCoursesSelected    Boolean @default(false)
  enrollmentDocumentsSubmitted Boolean @default(false)
  enrollmentCompleted          Boolean @default(false)

  totalEcts   Int @default(0)
  passedCount Int @default(0)
  failedCount Int @default(0)
  activeCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrollments StudentCourse[]
  documents   StudentDocument[]
}

model Course {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  holder         String
  holderEmail    String?
  assistant      String?
  assistantEmail String?
  description    String
  ects           Int
  semester       Int
  year           Int
  capacity       Int      @default(30)
  prerequisite   Course?  @relation("CoursePrerequisite", fields: [prerequisiteId], references: [id])
  prerequisiteId Int?
  dependents     Course[] @relation("CoursePrerequisite")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  enrollments StudentCourse[]
}

model StudentCourse {
  id               Int      @id @default(autoincrement())
  student          Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId        Int
  course           Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId         Int
  status           String
  assignedYear     Int
  assignedSemester Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([studentId])
  @@index([courseId])
  @@index([studentId, assignedSemester])
}

model StudentDocument {
  id         Int      @id @default(autoincrement())
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  Int
  type       String
  filename   String
  path       String
  mime       String
  size       Int
  accepted   Boolean  @default(false)
  uploadedAt DateTime @default(now())

  @@index([studentId, type])
}
